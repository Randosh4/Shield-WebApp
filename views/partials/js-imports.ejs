<script src="/assets/libs/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="/assets/libs/feather-icons/feather.min.js"></script>
<script src="/assets/libs/simplebar/simplebar.min.js"></script>
<!--<script src="/assets/libs/apexcharts/apexcharts.min.js"></script>-->
<!-- Main Js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
<script src="/assets/js/plugins.init.js"></script>
<script src="/assets/js/app.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"
        integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11.1.2/dist/sweetalert2.all.min.js"></script>

<script>
    function formatDate(dateString) {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const options = {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        };

        return `${year}-${month}-${day} ${date.toLocaleTimeString('en-US', options)}`;
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Assuming 'seizureDateElements' is a NodeList of elements with the 'seizureDate' class
        var seizureDateElements = document.querySelectorAll('.formatDate');

        if (seizureDateElements) {
            seizureDateElements.forEach(function (element) {
                var originalDate = element.textContent;
                element.textContent = formatDate(originalDate);
            });

        }
        // Loop through the elements and update the date
    });

    toastr.options = {
        "closeButton": false,
        "debug": false,
        "newestOnTop": false,
        "progressBar": true,
        "positionClass": "toast-top-right",
        "preventDuplicates": false,
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    }

    function displayNotification() {
        // Check if there is a notification flag in localStorage
        const hasNotification = localStorage.getItem('hasNotification');

        if (hasNotification === 'true') {
            // Retrieve the notification details from localStorage
            const notification = localStorage.getItem('notification');
            const notificationType = localStorage.getItem('notificationType');

            if (notificationType === 'success') {
                toastr.success(notification);
            } else if (notificationType === 'warning') {
                toastr.warning(notification);
            } else if (notificationType === 'error') {
                toastr.error(notification);
            }

            console.log('Notification Displayed');
            // Reset the notification flag and details
            localStorage.removeItem('hasNotification');
            localStorage.removeItem('notification');
            localStorage.removeItem('notificationType');
        }
    }

    displayNotification();
    search();
    function splitHash() {
        var elements = document.getElementsByClassName('split');

        // Loop through the elements and make necessary changes
        for (var i = 0; i < elements.length; i++) {
            var currentElement = elements[i];

            // Example modification: Add a line break after a specific number of characters
            var hashValue = currentElement.textContent;
            var maxLength = 32; // Change this to the desired length
            var modifiedHash = hashValue.substring(0, maxLength) + '<br>' + hashValue.substring(maxLength);

            // Update the content of the element
            currentElement.innerHTML = modifiedHash;
        }
    }

    function search() {
        var searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', function () {
                // Get the input value
                var searchText = this.value.toLowerCase();

                // Get all rows in the table body
                var rows = document.getElementById('dataTable').getElementsByTagName('tbody')[0].getElementsByTagName('tr');

                // Loop through each row
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];

                    // Get the text content of each cell in the row
                    var cells = row.getElementsByTagName('td');
                    var match = false;

                    // Loop through each cell
                    for (var j = 0; j < cells.length; j++) {
                        var cellText = cells[j].textContent || cells[j].innerText;

                        // Check if the cell text contains the search text
                        if (cellText.toLowerCase().indexOf(searchText) > -1) {
                            match = true;
                            break;
                        }
                    }

                    // Show or hide the row based on the match
                    row.style.display = match ? '' : 'none';
                }
            });
        }
    }


</script>

<script>
    let userType = localStorage.getItem('type');
    const showElementsByClass = (className) => {
        const elements = document.getElementsByClassName(className);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = 'block';
        }
    };
    const styleActionByClass = (className) => {
        const elements = document.getElementsByClassName(className);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = 'block';
            elements[i].style.display = 'flex';
            elements[i].style.gap = '10px';
        }
    };

    // Function to hide elements by class name
    const hideElementsByClass = (className) => {
        const elements = document.getElementsByClassName(className);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = 'none';
        }
    };

    const div = document.getElementById("button-cont");
    if (div) {
        if (userType == '1') {
            // Show delete, video popup, and edit buttons
            showElementsByClass('delete-button');
            showElementsByClass('edit-button');
            styleActionByClass("button-container");
        } else if (userType == '2') {
            hideElementsByClass('delete-button');
            hideElementsByClass('edit-button');
        }
    }

</script>
